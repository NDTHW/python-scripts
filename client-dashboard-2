import streamlit as st
import pandas as pd
from datetime import datetime
import json
import os

# Set page config
st.set_page_config(
    page_title="Client Management Dashboard",
    page_icon="👥",
    layout="wide"
)

# Initialize session state for storing clients if it doesn't exist
if 'clients' not in st.session_state:
    st.session_state.clients = []

# Function to load clients from file
def load_clients():
    if os.path.exists('clients.json'):
        with open('clients.json', 'r') as f:
            st.session_state.clients = json.load(f)

# Function to save clients to file
def save_clients():
    with open('clients.json', 'w') as f:
        json.dump(st.session_state.clients, f)

# Load existing clients when the app starts
load_clients()

# Main title
st.title("Client Management Dashboard")

# Sidebar for adding new clients
with st.sidebar:
    st.header("Add New Client")
    with st.form("new_client_form"):
        name = st.text_input("Client Name")
        email = st.text_input("Email(s) - separate multiple emails with commas")
        # Clean and validate emails
        emails = [e.strip() for e in email.split(',') if e.strip()]
        phone = st.text_input("Phone")
        company = st.text_input("Company")
        status = st.selectbox(
            "Status",
            ["Active", "Inactive", "Prospect"]
        )
        notes = st.text_area("Notes")
        
        submitted = st.form_submit_button("Add Client")
        if submitted and name:  # Ensure at least the name is provided
            new_client = {
                "id": len(st.session_state.clients) + 1,
                "name": name,
                "email": emails,
                "phone": phone,
                "company": company,
                "status": status,
                "notes": notes,
                "added_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            st.session_state.clients.append(new_client)
            save_clients()
            st.success("Client added successfully!")

# Main content area
tab1, tab2, tab3 = st.tabs(["All Clients", "Client Statistics", "Search"])

# Tab 1: All Clients
with tab1:
    if st.session_state.clients:
        df = pd.DataFrame(st.session_state.clients)
        
        # Add edit functionality with enhanced styling
        for i, client in enumerate(st.session_state.clients):
            st.markdown("---")  # Add separator between clients
            
            # Create a preview row with key information
            col1, col2, col3 = st.columns([2,2,1])
            with col1:
                st.subheader(client['name'])
            with col2:
                st.write(f"📍 {client['company']}")
            with col3:
                status_color = {
                    "Active": "🟢",
                    "Inactive": "🔴",
                    "Prospect": "🟡"
                }.get(client['status'], "⚪️")
                st.write(f"{status_color} {client['status']}")
            
            # Expandable section for editing
            with st.expander("📝 View/Edit Details"):
                st.markdown("### Client Details")
                with st.form(f"edit_client_{i}"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("#### Basic Information")
                        updated_name = st.text_input("Name", client['name'])
                        updated_company = st.text_input("Company", client['company'])
                        updated_phone = st.text_input("Phone", client['phone'])
                    
                    with col2:
                        st.markdown("#### Contact Details")
                        # Convert list of emails back to comma-separated string for editing
                        current_emails = ', '.join(client['email']) if isinstance(client['email'], list) else client['email']
                        updated_email = st.text_input("Email(s)", current_emails)
                        # Clean and validate updated emails
                        updated_emails = [e.strip() for e in updated_email.split(',') if e.strip()]
                    st.markdown("#### Additional Information")
                    col3, col4 = st.columns(2)
                    with col3:
                        updated_status = st.selectbox(
                            "Status",
                            ["Active", "Inactive", "Prospect"],
                            ["Active", "Inactive", "Prospect"].index(client['status'])
                        )
                    with col4:
                        st.write("Added on:", client['added_date'])
                    
                    st.markdown("#### Notes")
                    updated_notes = st.text_area("Client Notes", client['notes'], height=100)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.form_submit_button("Update"):
                            st.session_state.clients[i].update({
                                "name": updated_name,
                                "email": updated_emails,
                                "phone": updated_phone,
                                "company": updated_company,
                                "status": updated_status,
                                "notes": updated_notes
                            })
                            save_clients()
                            st.success("Client updated successfully!")
                    with col2:
                        if st.form_submit_button("Delete"):
                            st.session_state.clients.pop(i)
                            save_clients()
                            st.warning("Client deleted!")
                            st.rerun()
    else:
        st.info("No clients added yet. Use the sidebar to add your first client!")

# Tab 2: Client Statistics
with tab2:
    if st.session_state.clients:
        df = pd.DataFrame(st.session_state.clients)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Client Status Distribution")
            status_counts = df['status'].value_counts()
            st.bar_chart(status_counts)
        
        with col2:
            st.subheader("Client Summary")
            st.write(f"Total Clients: {len(df)}")
            st.write(f"Active Clients: {len(df[df['status'] == 'Active'])}")
            st.write(f"Inactive Clients: {len(df[df['status'] == 'Inactive'])}")
            st.write(f"Prospects: {len(df[df['status'] == 'Prospect'])}")
    else:
        st.info("Add some clients to see statistics!")

# Tab 3: Search
with tab3:
    if st.session_state.clients:
        search_term = st.text_input("Search clients by name, email, or company")
        if search_term:
            df = pd.DataFrame(st.session_state.clients)
            # Modified search to handle list of emails
            mask = (
                df['name'].str.contains(search_term, case=False, na=False) |
                df['email'].apply(lambda x: any(search_term.lower() in email.lower() for email in x if isinstance(x, list))) |
                df['company'].str.contains(search_term, case=False, na=False)
            )
            filtered_df = df[mask]
            if not filtered_df.empty:
                st.dataframe(filtered_df)
            else:
                st.info("No matching clients found.")
    else:
        st.info("Add some clients to use the search functionality!")